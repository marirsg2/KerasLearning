

When a layer is initialized with an input, the output is a layer object primarily defined by a TENSOR

1. You can write a function and have a "lambda" layer in keras
        single_embedding =  Lambda(lambda inp: K.sum(inp,axis=-1,keepdims=True), output_shape= lambda s: (s[0],1))(x)
        NOTE the output shape is stored as calculated and Must agree WITH THE shape of the RESULT of the calculation
        else you will see errors during compiling to the effect of dimensions dont match.
        ADDITIONAL: https://github.com/keras-team/keras/issues/3703

2. Check out the many loss functions, including cosine proximity, read carefully before use)

3. You can define your own loss function quite easily. See the "Variational_AE" script

4. See Variational_AE.py , in the fit function. Notice how the input is only one,
and there is no other output. The reason is that the input depends on the LOSS FUNCTION.
Here the loss function only needs "x" one input, and everything else is derived
from that. There is no other input needed. Aha !!
